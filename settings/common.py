"""
Django settings for restframework project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import os
from configurations import Configuration
from django.contrib import messages

from .static_config import StaticConfig
from .log_config import LogConfig
from .db_config import DBConfig
from .rest_config import RestConfig
from .cache_config import CacheConfig


class Common(StaticConfig, LogConfig, DBConfig, RestConfig, CacheConfig, Configuration):
    # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = '7uv3esw%3!p1h88!j*bz%@5go@dmy0e@_)zx=762oi!dif03zx'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []

    AUTH_USER_MODEL = 'user.Person'

    # Application definition
    INSTALLED_APPS = [
        # 确保安装django 1.9以上版本, 否则rest报错
        #  'django_admin_bootstrapped',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        # session, 使用DB作为Cache
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',

        'rest_framework',
        'rest_framework_swagger',
        #  使用自定义token, 而并非rest自带
        #  'rest_framework.authtoken',
        # shell_plus
        'django_extensions',
        # cache
        'cacheops',
    ]

    CUSTOMS_APPS = [
        'apps.user',
        'apps.study',
    ]

    INSTALLED_APPS = INSTALLED_APPS + CUSTOMS_APPS

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'urls'

    WSGI_APPLICATION = 'wsgi.application'

    # Password validation
    # https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    # bootstrap3
    DAB_FIELD_RENDERER = 'django_admin_bootstrapped.renderers.BootstrapFieldRenderer'
    MESSAGE_TAGS = {
        messages.SUCCESS: 'alert-success success',
        messages.WARNING: 'alert-warning warning',
        messages.ERROR: 'alert-danger error'
    }

    # log
    if DEBUG:
        # make all loggers use the console.
        for logger in LogConfig.LOGGING['loggers']:
            LogConfig.LOGGING['loggers'][logger]['handlers'] = ['console']
